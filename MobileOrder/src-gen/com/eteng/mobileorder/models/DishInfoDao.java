package com.eteng.mobileorder.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.eteng.mobileorder.models.DishInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DISH_INFO.
*/
public class DishInfoDao extends AbstractDao<DishInfo, Long> {

    public static final String TABLENAME = "DISH_INFO";

    /**
     * Properties of entity DishInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DishId = new Property(0, long.class, "dishId", true, "DISH_ID");
        public final static Property DishName = new Property(1, String.class, "dishName", false, "DISH_NAME");
        public final static Property Price = new Property(2, Float.class, "price", false, "PRICE");
        public final static Property DishImgPath = new Property(3, String.class, "dishImgPath", false, "DISH_IMG_PATH");
        public final static Property CreatePerson = new Property(4, String.class, "createPerson", false, "CREATE_PERSON");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
        public final static Property DiscountPrice = new Property(6, Float.class, "discountPrice", false, "DISCOUNT_PRICE");
        public final static Property DishSummary = new Property(7, String.class, "dishSummary", false, "DISH_SUMMARY");
        public final static Property DishCategory = new Property(8, Long.class, "dishCategory", false, "DISH_CATEGORY");
        public final static Property DishStock = new Property(9, String.class, "dishStock", false, "DISH_STOCK");
        public final static Property DishOrder = new Property(10, Integer.class, "dishOrder", false, "DISH_ORDER");
        public final static Property DishSerial = new Property(11, String.class, "dishSerial", false, "DISH_SERIAL");
        public final static Property DishStatus = new Property(12, String.class, "dishStatus", false, "DISH_STATUS");
        public final static Property DishType = new Property(13, String.class, "dishType", false, "DISH_TYPE");
    };

    private Query<DishInfo> categoryInfo_DishesQuery;

    public DishInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DishInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DISH_INFO' (" + //
                "'DISH_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: dishId
                "'DISH_NAME' TEXT," + // 1: dishName
                "'PRICE' REAL," + // 2: price
                "'DISH_IMG_PATH' TEXT," + // 3: dishImgPath
                "'CREATE_PERSON' TEXT," + // 4: createPerson
                "'CREATE_DATE' TEXT," + // 5: createDate
                "'DISCOUNT_PRICE' REAL," + // 6: discountPrice
                "'DISH_SUMMARY' TEXT," + // 7: dishSummary
                "'DISH_CATEGORY' INTEGER," + // 8: dishCategory
                "'DISH_STOCK' TEXT," + // 9: dishStock
                "'DISH_ORDER' INTEGER," + // 10: dishOrder
                "'DISH_SERIAL' TEXT," + // 11: dishSerial
                "'DISH_STATUS' TEXT," + // 12: dishStatus
                "'DISH_TYPE' TEXT);"); // 13: dishType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DISH_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DishInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDishId());
 
        String dishName = entity.getDishName();
        if (dishName != null) {
            stmt.bindString(2, dishName);
        }
 
        Float price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(3, price);
        }
 
        String dishImgPath = entity.getDishImgPath();
        if (dishImgPath != null) {
            stmt.bindString(4, dishImgPath);
        }
 
        String createPerson = entity.getCreatePerson();
        if (createPerson != null) {
            stmt.bindString(5, createPerson);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        Float discountPrice = entity.getDiscountPrice();
        if (discountPrice != null) {
            stmt.bindDouble(7, discountPrice);
        }
 
        String dishSummary = entity.getDishSummary();
        if (dishSummary != null) {
            stmt.bindString(8, dishSummary);
        }
 
        Long dishCategory = entity.getDishCategory();
        if (dishCategory != null) {
            stmt.bindLong(9, dishCategory);
        }
 
        String dishStock = entity.getDishStock();
        if (dishStock != null) {
            stmt.bindString(10, dishStock);
        }
 
        Integer dishOrder = entity.getDishOrder();
        if (dishOrder != null) {
            stmt.bindLong(11, dishOrder);
        }
 
        String dishSerial = entity.getDishSerial();
        if (dishSerial != null) {
            stmt.bindString(12, dishSerial);
        }
 
        String dishStatus = entity.getDishStatus();
        if (dishStatus != null) {
            stmt.bindString(13, dishStatus);
        }
 
        String dishType = entity.getDishType();
        if (dishType != null) {
            stmt.bindString(14, dishType);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DishInfo readEntity(Cursor cursor, int offset) {
        DishInfo entity = new DishInfo( //
            cursor.getLong(offset + 0), // dishId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dishName
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // price
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dishImgPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createPerson
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createDate
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // discountPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dishSummary
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // dishCategory
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dishStock
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // dishOrder
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // dishSerial
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dishStatus
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // dishType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DishInfo entity, int offset) {
        entity.setDishId(cursor.getLong(offset + 0));
        entity.setDishName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrice(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setDishImgPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatePerson(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDiscountPrice(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setDishSummary(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDishCategory(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setDishStock(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDishOrder(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDishSerial(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDishStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDishType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DishInfo entity, long rowId) {
        entity.setDishId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DishInfo entity) {
        if(entity != null) {
            return entity.getDishId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dishes" to-many relationship of CategoryInfo. */
    public List<DishInfo> _queryCategoryInfo_Dishes(Long dishCategory) {
        synchronized (this) {
            if (categoryInfo_DishesQuery == null) {
                QueryBuilder<DishInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DishCategory.eq(null));
                categoryInfo_DishesQuery = queryBuilder.build();
            }
        }
        Query<DishInfo> query = categoryInfo_DishesQuery.forCurrentThread();
        query.setParameter(0, dishCategory);
        return query.list();
    }

}
