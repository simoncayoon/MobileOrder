package com.eteng.mobileorder.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.eteng.mobileorder.models.RemarkInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REMARK_INFO.
*/
public class RemarkInfoDao extends AbstractDao<RemarkInfo, Long> {

    public static final String TABLENAME = "REMARK_INFO";

    /**
     * Properties of entity RemarkInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property SellerId = new Property(1, Long.class, "sellerId", false, "SELLER_ID");
        public final static Property RemarkName = new Property(2, String.class, "remarkName", false, "REMARK_NAME");
        public final static Property RemarkStatus = new Property(3, String.class, "remarkStatus", false, "REMARK_STATUS");
        public final static Property Order = new Property(4, Integer.class, "order", false, "ORDER");
        public final static Property BelongsToId = new Property(5, Long.class, "belongsToId", false, "BELONGS_TO_ID");
    };

    private Query<RemarkInfo> categoryInfo_RemarksQuery;

    public RemarkInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RemarkInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REMARK_INFO' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'SELLER_ID' INTEGER," + // 1: sellerId
                "'REMARK_NAME' TEXT," + // 2: remarkName
                "'REMARK_STATUS' TEXT," + // 3: remarkStatus
                "'ORDER' INTEGER," + // 4: order
                "'BELONGS_TO_ID' INTEGER);"); // 5: belongsToId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REMARK_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RemarkInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long sellerId = entity.getSellerId();
        if (sellerId != null) {
            stmt.bindLong(2, sellerId);
        }
 
        String remarkName = entity.getRemarkName();
        if (remarkName != null) {
            stmt.bindString(3, remarkName);
        }
 
        String remarkStatus = entity.getRemarkStatus();
        if (remarkStatus != null) {
            stmt.bindString(4, remarkStatus);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(5, order);
        }
 
        Long belongsToId = entity.getBelongsToId();
        if (belongsToId != null) {
            stmt.bindLong(6, belongsToId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RemarkInfo readEntity(Cursor cursor, int offset) {
        RemarkInfo entity = new RemarkInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // sellerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remarkName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remarkStatus
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // order
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // belongsToId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RemarkInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSellerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRemarkName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemarkStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrder(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBelongsToId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RemarkInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RemarkInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "remarks" to-many relationship of CategoryInfo. */
    public List<RemarkInfo> _queryCategoryInfo_Remarks(Long belongsToId) {
        synchronized (this) {
            if (categoryInfo_RemarksQuery == null) {
                QueryBuilder<RemarkInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BelongsToId.eq(null));
                categoryInfo_RemarksQuery = queryBuilder.build();
            }
        }
        Query<RemarkInfo> query = categoryInfo_RemarksQuery.forCurrentThread();
        query.setParameter(0, belongsToId);
        return query.list();
    }

}
