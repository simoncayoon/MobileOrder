package com.eteng.mobileorder.models;

import java.util.List;
import com.eteng.mobileorder.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CATEGORY_INFO.
 */
public class CategoryInfo {

    private long categoryId;
    private String categoryCode;
    private String categoryName;
    private Integer categoryOrder;
    private String categoryStatus;
    private String createDate;
    private String createPerson;
    private Boolean isNoodle;
    private Long sellerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryInfoDao myDao;

    private List<DishInfo> dishes;
    private List<RemarkInfo> remarks;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CategoryInfo() {
    }

    public CategoryInfo(long categoryId) {
        this.categoryId = categoryId;
    }

    public CategoryInfo(long categoryId, String categoryCode, String categoryName, Integer categoryOrder, String categoryStatus, String createDate, String createPerson, Boolean isNoodle, Long sellerId) {
        this.categoryId = categoryId;
        this.categoryCode = categoryCode;
        this.categoryName = categoryName;
        this.categoryOrder = categoryOrder;
        this.categoryStatus = categoryStatus;
        this.createDate = createDate;
        this.createPerson = createPerson;
        this.isNoodle = isNoodle;
        this.sellerId = sellerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryInfoDao() : null;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    public String getCategoryCode() {
        return categoryCode;
    }

    public void setCategoryCode(String categoryCode) {
        this.categoryCode = categoryCode;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    public Integer getCategoryOrder() {
        return categoryOrder;
    }

    public void setCategoryOrder(Integer categoryOrder) {
        this.categoryOrder = categoryOrder;
    }

    public String getCategoryStatus() {
        return categoryStatus;
    }

    public void setCategoryStatus(String categoryStatus) {
        this.categoryStatus = categoryStatus;
    }

    public String getCreateDate() {
        return createDate;
    }

    public void setCreateDate(String createDate) {
        this.createDate = createDate;
    }

    public String getCreatePerson() {
        return createPerson;
    }

    public void setCreatePerson(String createPerson) {
        this.createPerson = createPerson;
    }

    public Boolean getIsNoodle() {
        return isNoodle;
    }

    public void setIsNoodle(Boolean isNoodle) {
        this.isNoodle = isNoodle;
    }

    public Long getSellerId() {
        return sellerId;
    }

    public void setSellerId(Long sellerId) {
        this.sellerId = sellerId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DishInfo> getDishes() {
        if (dishes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DishInfoDao targetDao = daoSession.getDishInfoDao();
            List<DishInfo> dishesNew = targetDao._queryCategoryInfo_Dishes(categoryId);
            synchronized (this) {
                if(dishes == null) {
                    dishes = dishesNew;
                }
            }
        }
        return dishes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDishes() {
        dishes = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RemarkInfo> getRemarks() {
        if (remarks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RemarkInfoDao targetDao = daoSession.getRemarkInfoDao();
            List<RemarkInfo> remarksNew = targetDao._queryCategoryInfo_Remarks(categoryId);
            synchronized (this) {
                if(remarks == null) {
                    remarks = remarksNew;
                }
            }
        }
        return remarks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRemarks() {
        remarks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
