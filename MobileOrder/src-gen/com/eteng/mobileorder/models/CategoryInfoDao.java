package com.eteng.mobileorder.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.eteng.mobileorder.models.CategoryInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CATEGORY_INFO.
*/
public class CategoryInfoDao extends AbstractDao<CategoryInfo, Long> {

    public static final String TABLENAME = "CATEGORY_INFO";

    /**
     * Properties of entity CategoryInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CategoryId = new Property(0, long.class, "categoryId", true, "CATEGORY_ID");
        public final static Property CategoryCode = new Property(1, String.class, "categoryCode", false, "CATEGORY_CODE");
        public final static Property CategoryName = new Property(2, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property CategoryOrder = new Property(3, Integer.class, "categoryOrder", false, "CATEGORY_ORDER");
        public final static Property CategoryStatus = new Property(4, String.class, "categoryStatus", false, "CATEGORY_STATUS");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
        public final static Property CreatePerson = new Property(6, String.class, "createPerson", false, "CREATE_PERSON");
        public final static Property IsNoodle = new Property(7, Boolean.class, "isNoodle", false, "IS_NOODLE");
        public final static Property SellerId = new Property(8, Long.class, "sellerId", false, "SELLER_ID");
    };

    private DaoSession daoSession;

    private Query<CategoryInfo> sellerInfo_CategoryQuery;

    public CategoryInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CATEGORY_INFO' (" + //
                "'CATEGORY_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: categoryId
                "'CATEGORY_CODE' TEXT," + // 1: categoryCode
                "'CATEGORY_NAME' TEXT," + // 2: categoryName
                "'CATEGORY_ORDER' INTEGER," + // 3: categoryOrder
                "'CATEGORY_STATUS' TEXT," + // 4: categoryStatus
                "'CREATE_DATE' TEXT," + // 5: createDate
                "'CREATE_PERSON' TEXT," + // 6: createPerson
                "'IS_NOODLE' INTEGER," + // 7: isNoodle
                "'SELLER_ID' INTEGER);"); // 8: sellerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CATEGORY_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CategoryInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCategoryId());
 
        String categoryCode = entity.getCategoryCode();
        if (categoryCode != null) {
            stmt.bindString(2, categoryCode);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(3, categoryName);
        }
 
        Integer categoryOrder = entity.getCategoryOrder();
        if (categoryOrder != null) {
            stmt.bindLong(4, categoryOrder);
        }
 
        String categoryStatus = entity.getCategoryStatus();
        if (categoryStatus != null) {
            stmt.bindString(5, categoryStatus);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String createPerson = entity.getCreatePerson();
        if (createPerson != null) {
            stmt.bindString(7, createPerson);
        }
 
        Boolean isNoodle = entity.getIsNoodle();
        if (isNoodle != null) {
            stmt.bindLong(8, isNoodle ? 1l: 0l);
        }
 
        Long sellerId = entity.getSellerId();
        if (sellerId != null) {
            stmt.bindLong(9, sellerId);
        }
    }

    @Override
    protected void attachEntity(CategoryInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CategoryInfo readEntity(Cursor cursor, int offset) {
        CategoryInfo entity = new CategoryInfo( //
            cursor.getLong(offset + 0), // categoryId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // categoryCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categoryName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // categoryOrder
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // categoryStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createPerson
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isNoodle
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // sellerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CategoryInfo entity, int offset) {
        entity.setCategoryId(cursor.getLong(offset + 0));
        entity.setCategoryCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategoryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategoryOrder(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCategoryStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreatePerson(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsNoodle(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setSellerId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CategoryInfo entity, long rowId) {
        entity.setCategoryId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CategoryInfo entity) {
        if(entity != null) {
            return entity.getCategoryId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "category" to-many relationship of SellerInfo. */
    public List<CategoryInfo> _querySellerInfo_Category(Long sellerId) {
        synchronized (this) {
            if (sellerInfo_CategoryQuery == null) {
                QueryBuilder<CategoryInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SellerId.eq(null));
                sellerInfo_CategoryQuery = queryBuilder.build();
            }
        }
        Query<CategoryInfo> query = sellerInfo_CategoryQuery.forCurrentThread();
        query.setParameter(0, sellerId);
        return query.list();
    }

}
